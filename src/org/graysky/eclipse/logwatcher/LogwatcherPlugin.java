package org.graysky.eclipse.logwatcher;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPluginDescriptor;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.jface.resource.FontRegistry;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.ui.plugin.AbstractUIPlugin;

/**
 * The main plugin class to be used in the desktop. (Mostly generated by PDE)
 */
public class LogwatcherPlugin extends AbstractUIPlugin
{
	//The shared instance.
	private static LogwatcherPlugin plugin;
	//Resource bundle.
	private ResourceBundle resourceBundle;
	
	private FontRegistry	m_fontRegistry = new FontRegistry();
	
	// Preferences constants
	private static final String	LOG_FONT		= "logwatcherFont";
	private static final String	SAVE_WATCHERS	= "saveWatchers";
	
   
	/**
	 * The constructor.
	 */
	public LogwatcherPlugin(IPluginDescriptor descriptor) {
		super(descriptor);
		plugin = this;
		try {
			resourceBundle= ResourceBundle.getBundle("org.graysky.eclipse.logwatcher.LogwatcherPluginResources");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
	}

	/**
	 * Returns the shared instance.
	 */
	public static LogwatcherPlugin getDefault() {
		return plugin;
	}

	/**
	 * Returns the workspace instance.
	 */
	public static IWorkspace getWorkspace() {
		return ResourcesPlugin.getWorkspace();
	}

	/**
	 * Returns the string from the plugin's resource bundle,
	 * or 'key' if not found.
	 */
	public static String getResourceString(String key) {
		ResourceBundle bundle= LogwatcherPlugin.getDefault().getResourceBundle();
		try {
			return bundle.getString(key);
		} catch (MissingResourceException e) {
			return key;
		}
	}

	/**
	 * Returns the plugin's resource bundle,
	 */
	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}
	
	
	protected void initializeDefaultPreferences(IPreferenceStore store) {
		super.initializeDefaultPreferences(store);
		store.setDefault("saveWatchers", true);
	}

	/**
	 * Get a font from the plugin's font registry.
	 * 
	 * @param name Symbolic name of the font
	 * @return Font The requested font, or the default font if not found.
	 */
	public Font getFont(String name)
	{
		return m_fontRegistry.get(name);
	}

	public void putFont(String name, FontData[] data)
	{
		m_fontRegistry.put(name, data);
	}

	public void startup() throws CoreException
	{
		super.startup();
		
		// Store the preferred font in the registry
		if (getPreferenceStore().contains("logwatcherFont")) {
			m_fontRegistry.put("logwatcherFont", 
				PreferenceConverter.getFontDataArray(getPreferenceStore(), "logwatcherFont"));
		}
	}

}
